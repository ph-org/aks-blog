name: Terraform Deploy to Azure (OIDC)

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  id-token: write       # Required for OIDC login
  contents: read        # Required to read repo contents

env:
  TF_VERSION: 'latest'
  TF_DIR: './templates'
  BACKEND_RG: ${{ vars.TF_RESOURCE_GROUP_NAME }}
  BACKEND_SA: ${{ vars.TF_STORAGE_ACCOUNT_NAME }}
  BACKEND_CONTAINER: ${{ vars.TF_CONTAINER_NAME }}
  BACKEND_KEY: 'tf-aks-deploy.tfstate'

jobs:
  validate:
    name: Validate Terraform & Scan
    runs-on: ubuntu-latest
    environment: dev

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Format Check
        run: terraform fmt -check
        working-directory: ${{ env.TF_DIR }}

      - name: Terraform Init (no backend)
        run: terraform init -backend=false
        working-directory: ${{ env.TF_DIR }}

      - name: Terraform Validate
        run: terraform validate
        working-directory: ${{ env.TF_DIR }}

  plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: validate
    environment: dev

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Azure Login via OIDC
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Export Azure credentials for Terraform
        run: |
          echo "ARM_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID }}" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=${{ secrets.AZURE_SUBSCRIPTION_ID }}" >> $GITHUB_ENV
          echo "ARM_USE_OIDC=true" >> $GITHUB_ENV
          echo "ARM_USE_AZUREAD=true" >> $GITHUB_ENV

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="resource_group_name=${{ env.BACKEND_RG }}" \
            -backend-config="storage_account_name=${{ env.BACKEND_SA }}" \
            -backend-config="container_name=${{ env.BACKEND_CONTAINER }}" \
            -backend-config="key=${{ env.BACKEND_KEY }}" \
            -backend-config="use_azuread_auth=true"
        working-directory: ${{ env.TF_DIR }}

      - name: Export Azure credentials for Terraform
        run: |
          echo "ARM_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID }}" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=${{ secrets.AZURE_SUBSCRIPTION_ID }}" >> $GITHUB_ENV
          echo "ARM_USE_OIDC=true" >> $GITHUB_ENV
          echo "ARM_USE_AZUREAD=true" >> $GITHUB_ENV

      - name: Terraform Validate
        run: terraform validate
        working-directory: ${{ env.TF_DIR }}

      - name: Terraform Plan
        run: terraform plan -out=tf-aks-deploy.tfplan
        working-directory: ${{ env.TF_DIR }}

  deploy:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: [validate, plan]
    environment: dev

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Azure Login via OIDC
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Export Azure credentials for Terraform
        run: |
          echo "ARM_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID }}" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=${{ secrets.AZURE_SUBSCRIPTION_ID }}" >> $GITHUB_ENV
          echo "ARM_USE_OIDC=true" >> $GITHUB_ENV
          echo "ARM_USE_AZUREAD=true" >> $GITHUB_ENV

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="resource_group_name=${{ env.BACKEND_RG }}" \
            -backend-config="storage_account_name=${{ env.BACKEND_SA }}" \
            -backend-config="container_name=${{ env.BACKEND_CONTAINER }}" \
            -backend-config="key=${{ env.BACKEND_KEY }}" \
            -backend-config="use_azuread_auth=true"
        working-directory: ${{ env.TF_DIR }}
        
      - name: Export Azure credentials for Terraform
        run: |
          echo "ARM_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID }}" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=${{ secrets.AZURE_SUBSCRIPTION_ID }}" >> $GITHUB_ENV
          echo "ARM_USE_OIDC=true" >> $GITHUB_ENV
          echo "ARM_USE_AZUREAD=true" >> $GITHUB_ENV

      - name: Terraform Plan
        run: terraform plan -out=tf-aks-deploy.tfplan
        working-directory: ${{ env.TF_DIR }}
        env:
          ARM_USE_AZUREAD: true

      - name: Terraform Apply
        run: terraform apply tf-aks-deploy.tfplan
        working-directory: ${{ env.TF_DIR }}
        env:
          ARM_USE_AZUREAD: true
